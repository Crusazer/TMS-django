openapi: 3.0.0
info:
  title: Shop App
  description: |
    API provides possibility to get data of shop
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local host for debugging

paths:
  /products/{product_id}/:
    get:
      summary: get product
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Non-existent product id

  /products/:
    get:
      summary: Get paginated products
      parameters:
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/page'
        - name: category_id
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProducts'

  /categories/{category_d}:
    get:
      summary: Get category on id
      parameters:
        - name: category_id
          in: path
        - $ref: '#/components/parameters/include_products'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Non-existent category id

  /categories/:
    get:
      summary: Get paginated categories
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/include_products'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategories'

  /user/registration/:
    post:
      description: Registration new user
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                password2:
                  type: string
                  required: true
      responses:
        200:
          description: New user successful created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /token/:
    post:
      summary: Obtain authentication token
      requestBody:
        description: User credentials (username and password)
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: Access token
                  refresh:
                    type: string
                    description: Refresh token
        401:
          description: Wrong username and/or password

  /token/refresh/:
    post:
      summary: Refresh access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  description: Refresh token
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: Access token
        400:
          description: Wrong refresh token

  /add_to_card/:
    post:
      security:
        - bearerAuth: [ ]
      summary: Add product to users card
      requestBody:
        description: Product id
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          description: Not authorized
        404:
          description: Non-existent product id

  /shopping_card/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get user's shopping card
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Not authorized
    post:
      security:
        - bearerAuth: [ ]
      description: Clear user's shopping cart
      parameters:
        - name: clear
          in: query
          schema:
            type: boolean
        - name: confirm
          in: query
          schema:
            type: boolean
      responses:
        301:
          description: Redirect to user's shopping cart
        401:
          description: Non auth

  /order_entry/{order_entry_id}/delete/:
    post:
      summary: Delete order_entry from order
      parameters:
        - $ref: '#/components/parameters/order_entry_id'

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
        404:
          description: Non-existent order entry

  /order_entry/{order_entry_id}/change/:
    post:
      summary: Change order entry
      parameters:
        - $ref: '#/components/parameters/order_entry_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
      responses:
        200:
          description: OK

  /user/:
    get:
      summary: Get user's data
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Non auth

    post:
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                first_name:
                  type: string
                last_name:
                  type:
                    string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Non auth

  /orders/:
    get:
      summary: Get paginated orders
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: Get paginated orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrder'

  /order_repeat/{order_id}:
    post:
      summary: Clean shopping cart and repeat order
      security:
        - bearerAuth: [ ]
      parameters:
        - name: order_id
          in: path
      responses:
        301:
          description: Redirect to user's shopping cart
        404:
          description: Non-existent order


components:
  parameters:
    page_size:
      name: page_size
      in: query
      schema:
        type: integer

    page:
      name: page
      in: query
      schema:
        type: integer

    include_products:
      name: include_products
      in: query
      description: Specify True or False for including products in response
      schema:
        type: boolean
        default: false

    order_entry_id:
      name: order_entry_id
      in: path
      schema:
        type: integer


  schemas:
    Pagination:
      type: object
      properties:
        count:
          type: integer
        next:
          type: integer
          nullable: true
        previous:
          type: integer
          nullable: true

    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: integer

    PaginatedProducts:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    Category:
      properties:
        name:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    PaginatedCategories:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Category'

    User:
      properties:
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true

    OrderEntry:
      properties:
        count:
          type: integer
        product:
          $ref: '#/components/schemas/Product'


    Order:
      properties:
        total_price:
          type: number
        total_count:
          type: integer
        order_entries:
          type: array
          items:
            $ref: '#/components/schemas/OrderEntry'

    PaginatedOrder:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Order'